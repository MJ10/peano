/*
 * General definition of a mathematical domain.
 * A domain needs to define:
 * - A space of problems through a problem generator: given a seed, it gives back a Universe.
 * - A reward model: given a universe generated by the domain, it returns a boolean saying whether the problem
 * was solved.
 */

use crate::universe::Universe;

pub trait Domain {
    // A string identifying the domain.
    fn name(&self) -> String;

    // The number of problems in the domain.
    // This is one past the max value that can be passed to `generate`.
    // When using a random problem generator, this is typically u64::MAX.
    fn size(&self) -> u64;

    // Generates the i-th problem in the domain, along with a string representation.
    fn generate(&self, seed: u64) -> (Universe, String);

    // Given the universe containing the current state, returns whether
    // the posed problem has been solved.
    fn reward(&self, universe: &Universe) -> bool;
}
